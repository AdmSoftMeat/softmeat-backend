// config/plugins.js
const { formatR2Url, getResourceType, generateFileName } = require('../src/utils/r2');

module.exports = ({ env }) => ({
 'users-permissions': {
   config: {
     jwtSecret: env('JWT_SECRET'),
   },
 },
 upload: {
   config: {
     provider: '@strapi/provider-upload-aws-s3',
     providerOptions: {
       accessKeyId: env('R2_ACCESS_KEY'),
       secretAccessKey: env('R2_SECRET_KEY'),
       endpoint: env('R2_ENDPOINT'),
       params: {
         Bucket: env('R2_BUCKET'),
         ACL: 'public-read',
       },
       region: env('R2_REGION', 'auto'),
     },
     actionOptions: {
       upload: {
         ACL: 'public-read',
         // Função para personalizar o caminho de upload
         customPath: (file) => {
           console.log('Customizando caminho para upload:', file.name);

           // Detectar o tipo de recurso (imagem, vídeo, etc.)
           const resourceType = file.mime.startsWith('image/') ? 'images' :
                               file.mime.startsWith('video/') ? 'videos' :
                               file.mime.startsWith('audio/') ? 'audios' : 'files';

           console.log('Tipo de recurso:', resourceType);

           // Determinar a categoria com base no contexto do upload
           let category = 'geral';

           // Tenta determinar a categoria baseado no tipo de conteúdo relacionado
           if (file.related) {
             // Extrai o modelo de relacionamento
             const relatedType = file.related.split('.')[0];
             console.log('Tipo relacionado:', relatedType);

             switch (relatedType) {
               case 'produto':
                 category = 'produtos';
                 break;
               case 'curso-online':
                 category = 'cursos';
                 break;
               case 'testemunho':
                 category = 'testemunhos';
                 break;
               case 'cliente':
                 category = 'clientes';
                 break;
               case 'hero-consultoria':
               case 'home-consultoria':
                 category = 'consultoria';
                 break;
               case 'home-hero':
               case 'index-destaque':
                 category = 'index';
                 break;
               case 'sobre-carrossel':
                 category = 'institucional';
                 break;
               case 'carrossel-treinamento':
               case 'treinamento':
               case 'cronograma':
               case 'home-treinamento':
                 category = 'treinamentos';
                 break;
               default:
                 category = 'geral';
             }
           }

           console.log('Categoria:', category);

           // Gerar nome de arquivo único
           const extension = file.ext.startsWith('.') ? file.ext.substring(1) : file.ext;
           const timestamp = Date.now();
           const fileName = `${file.hash}-${timestamp}.${extension}`;

           // Gerar o caminho completo
           const path = `${resourceType}/${category}/${fileName}`;
           console.log('Caminho final:', path);

           return path;
         }
       },
       uploadStream: {
         ACL: 'public-read'
       },
       delete: {},
     },
   },
 },
});
