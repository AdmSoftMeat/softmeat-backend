# Estrutura do Projeto SoftMeat - backend_main

├── config
├── public
│   ├── uploads
├── scripts
│   ├── images
│   │   ├── clientes
│   │   ├── consultoria
│   │   ├── cursos
│   │   ├── index
│   │   ├── institucional
│   │   ├── logo
│   │   ├── produtos
│   │   └── testemunhos
├── src
│   ├── admin
│   ├── api
│   │   ├── carrossel-treinamento
│   │   │   ├── content-types
│   │   │   │   └── carrossel-treinamento
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── cliente
│   │   │   ├── content-types
│   │   │   │   └── cliente
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── configuracao-geral
│   │   │   ├── content-types
│   │   │   │   └── configuracao-geral
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── cronograma
│   │   │   ├── content-types
│   │   │   │   └── cronograma
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── curso-online
│   │   │   ├── content-types
│   │   │   │   └── curso-online
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── hero-consultoria
│   │   │   ├── content-types
│   │   │   │   └── hero-consultoria
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── home-consultoria
│   │   │   ├── content-types
│   │   │   │   └── home-consultoria
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── home-hero
│   │   │   ├── content-types
│   │   │   │   └── home-hero
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── home-treinamento
│   │   │   ├── content-types
│   │   │   │   └── home-treinamento
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── index-destaque
│   │   │   ├── content-types
│   │   │   │   └── index-destaque
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── media-reference
│   │   │   ├── controllers
│   │   │   └── routes
│   │   ├── produto
│   │   │   ├── content-types
│   │   │   │   └── produto
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── sobre-carrossel
│   │   │   ├── content-types
│   │   │   │   └── sobre-carrossel
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── testemunho
│   │   │   ├── content-types
│   │   │   │   └── testemunho
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── treinamento
│   │   │   ├── content-types
│   │   │   │   └── treinamento
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   ├── middlewares
│   ├── utils
├── .env
├── package.json


.env

# Configurações Básicas
HOST=0.0.0.0
PORT=1337
APP_KEYS=2VJlAoWpXfzDHzGqX7IVTA==,QSdu6uWUfiOcoPe5SgRI+w==,I9GT5I/hmBtES9PgklJFow==,W6LM3JinQfZ6BN/+u5aFSA==
API_TOKEN_SALT=isFissNnC7p/4U1GpNnMDA==
ADMIN_JWT_SECRET=E4rq8HGv9avD80L7hXY8TA==
JWT_SECRET=vDZKwN6GXEPTfdIC8Aijrg==
NODE_ENV=production
TRANSFER_TOKEN_SALT=f7AxKedt8ymyXFKKRHw47A==

# PostgreSQL (Railway Service Reference)
DATABASE_URL=${{Postgres.DATABASE_URL}}
DATABASE_SSL=true
PGHOST=${{Postgres.PGHOST}}
PGPORT=${{Postgres.PGPORT}}
PGDATABASE=${{Postgres.PGDATABASE}}
PGUSER=${{Postgres.PGUSER}}
PGPASSWORD=${{Postgres.PGPASSWORD}}

# PostgreSQL (Railway Service Reference)
# DATABASE_URL=postgresql://postgres:mxePKIoHxNgeAaQMkNHcVqcCMwygQDIO@postgres.railway.internal:5432/railway
# DATABASE_SSL=true
# PGHOST=postgres.railway.internal
# PGPORT=5432
# PGDATABASE=railway
# PGUSER=postgres
# PGPASSWORD=mxePKIoHxNgeAaQMkNHcVqcCMwygQDIO

# Cloudflare R2
R2_ACCESS_KEY=c5a5705f56ec2c7d0198c9b712eda3c4
R2_SECRET_KEY=f01299d076461e261024d2778df30f9e23e6b74674633efa918798a58b806d33
R2_BUCKET=softmeat-storage
R2_ENDPOINT=https://950693b7edbd202561c3d20e4a036247.r2.cloudflarestorage.com
R2_PUBLIC_URL=https://storage.softmeat.com.br
R2_REGION=auto


.strapi\client\app.js

/**
 * This file was automatically generated by Strapi.
 * Any modifications made will be discarded.
 */
import i18N from "@strapi/plugin-i18n/strapi-admin";
import usersPermissions from "@strapi/plugin-users-permissions/strapi-admin";
import importExportEntries from "strapi-plugin-import-export-entries/strapi-admin";
import { renderAdmin } from "@strapi/strapi/admin";

import customisations from "../../src/admin/app.js";

renderAdmin(document.getElementById("strapi"), {
  customisations,
  plugins: {
    i18n: i18N,
    "users-permissions": usersPermissions,
    "import-export-entries": importExportEntries,
  },
});


config\admin.js

module.exports = ({ env }) => ({
  auth: {
    secret: env('ADMIN_JWT_SECRET'),
  },
  apiToken: {
    salt: env('API_TOKEN_SALT'),
  },
  transfer: {
    token: {
      salt: env('TRANSFER_TOKEN_SALT'),
    },
  },
  flags: {
    nps: env.bool('FLAG_NPS', false),
    promoteEE: env.bool('FLAG_PROMOTE_EE', false),
  },
  watchIgnoreFiles: [
    '**/config/sync/**',
  ],
});


config\api.js

module.exports = {
  rest: {
    defaultLimit: 25,
    maxLimit: 100,
    withCount: true,
  },
  responses: {
    privateAttributes: ['_v', 'id', 'created_at'],
  },
  webhook: {
    populateRelations: false,
  },
};


config\database.js

module.exports = ({ env }) => ({
  connection: {
    client: 'postgres',
    connection: {
      host: env('PGHOST', 'localhost'),
      port: env.int('PGPORT', 5432),
      database: env('PGDATABASE', 'strapi'),
      user: env('PGUSER', 'postgres'),
      password: env('PGPASSWORD', 'postgres'),
      ssl: env.bool('DATABASE_SSL', false) ? {
        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false)
      } : false
    },
    debug: false
  }
});


config\middlewares.js

// config/middlewares.js
module.exports = [
  'strapi::errors',
  'strapi::security',
  'strapi::cors',
  'strapi::poweredBy',
  'strapi::logger',
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];


config\plugins.js

// config/plugins.js
const path = require('path');

module.exports = ({ env }) => ({
  upload: {
    config: {
      provider: '@strapi/provider-upload-aws-s3',
      providerOptions: {
        s3Options: {
          credentials: {
            accessKeyId: env('R2_ACCESS_KEY'),
            secretAccessKey: env('R2_SECRET_KEY')
          },
          endpoint: env('R2_ENDPOINT'),
          region: env('R2_REGION', 'auto'),
          params: {
            Bucket: env('R2_BUCKET'),
            ACL: 'public-read',
          }
        },
        baseUrl: env('R2_PUBLIC_URL')
      },
      actionOptions: {
        upload: {
          ACL: 'public-read',
          customPath: (file) => {
            console.log("=== plugins.js carregado NO DEPLOY ===");
            throw new Error("Testando se plugins.js está sendo carregado!");


            // ERRO PROPOSITAL PARA TESTe
            throw new Error("Testando se plugins.js está sendo carregado!");

            // Logs para depuração
            console.log('File object:', JSON.stringify({
              name: file.name,
              hash: file.hash,
              ext: file.ext,
              related: file.related,
              mime: file.mime,
              path: file.path
            }, null, 2));

            // Função para sanitizar strings
            const sanitizeString = (str) => {
              if (!str) return '';
              return str
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/[^a-zA-Z0-9-_]/g, '-')
                .replace(/-+/g, '-')
                .toLowerCase();
            };

            // Determinar categoria
            let category = 'geral';
            if (file.related) {
              const relatedType = typeof file.related === 'string'
                ? file.related.split('.')[0]
                : Array.isArray(file.related) && file.related.length > 0
                  ? file.related[0].ref.split('.')[0]
                  : 'geral';
              category = relatedType || 'geral';
            }

            // Sanitizar nome do arquivo
            const nameWithoutExt = path.basename(file.name, path.extname(file.name));
            const sanitizedName = sanitizeString(nameWithoutExt);

            // Formato final: categoria/categoria_nome-arquivo.ext
            const finalPath = `${category}/${category}_${sanitizedName}${path.extname(file.name)}`;
            console.log('Final path:', finalPath);
            return finalPath;
          }
        }
      }
    },
  },
});


config\server.js

module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  url: env('PUBLIC_URL', 'https://softmeat-backend-production.up.railway.app'),
  app: {
    keys: env.array('APP_KEYS'),
  },
  // Configurações de timeout
  emitErrors: false,
  maxUploadLimit: '50mb',
  maxRequestSize: '50mb',
  http2: {
    enabled: false,
  },
  webhooks: {
    populateRelations: false,
  },
  // Timeouts
  timeout: 120000,
});


config\webhooks.js

// config/webhooks.js
module.exports = {
  default: {
    'media.create': [
      {
        name: 'frontend-notification',
        url: process.env.FRONTEND_WEBHOOK_URL,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    ],
    'media.update': [
      {
        name: 'frontend-notification',
        url: process.env.FRONTEND_WEBHOOK_URL,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    ],
    'media.delete': [
      {
        name: 'frontend-notification',
        url: process.env.FRONTEND_WEBHOOK_URL,
        headers: {
          'Content-Type': 'application/json',
        },
      },
    ],
  },
};


package.json

{
  "name": "backend",
  "private": true,
  "version": "0.1.0",
  "description": "A Strapi application",
  "scripts": {
    "develop": "strapi develop",
    "start": "NODE_ENV=production strapi start",
    "build": "strapi build",
    "strapi": "strapi"
  },

    "dependencies": {
      "@strapi/plugin-i18n": "4.15.5",
      "@strapi/plugin-users-permissions": "4.15.5",
      "@strapi/provider-upload-aws-s3": "4.15.5",
      "@strapi/strapi": "4.15.5",
      "aws-sdk": "2.1095.0",
      "better-sqlite3": "8.0.1",
      "pg": "8.14.1",
      "pg-connection-string": "2.7.0",
      "sharp": "0.32.6",
      "strapi-plugin-import-export-entries": "1.23.1"
    },
    "resolutions": {
      "@radix-ui/react-use-effect-event": "0.0.3",
      "react": "^18.2.0",
      "react-dom": "^18.2.0"
    },
  "author": {
    "name": "A Strapi developer"
  },
  "strapi": {
    "uuid": "3289c097-8983-4dc0-817c-2192d4dfd468"
  },
  "engines": {
    "node": ">=14.19.1 <=18.x.x",
    "npm": ">=6.0.0"
  },
  "license": "MIT",
  "devDependencies": {
    "@aws-sdk/client-s3": "^3.188.0",
    "dotenv": "^16.4.7",
    "mime-types": "^2.1.35"
  }
}


scripts\diagnose-upload.js

// scripts/diagnose-upload.js
const fs = require('fs');
const path = require('path');
require('dotenv').config();

console.log('=== DIAGNÓSTICO DE UPLOAD R2/STRAPI ===\n');

// 1. Variáveis de ambiente
const requiredVars = [
  'R2_ACCESS_KEY', 'R2_SECRET_KEY', 'R2_ENDPOINT', 'R2_BUCKET', 'R2_PUBLIC_URL', 'R2_REGION'
];
console.log('Variáveis de ambiente:');
requiredVars.forEach(v => {
  console.log(`${v}:`, process.env[v] ? '✓ Configurado' : '✗ Não configurado');
});

// 2. plugins.js
const pluginsPath = path.join(process.cwd(), 'config', 'plugins.js');
if (fs.existsSync(pluginsPath)) {
  const content = fs.readFileSync(pluginsPath, 'utf8');
  console.log('\n✓ plugins.js encontrado');
  console.log('  Provider configurado:', content.includes('@strapi/provider-upload-aws-s3') ? 'aws-s3' : 'outro');
  console.log('  customPath presente:', content.includes('customPath') ? 'Sim' : 'Não');
} else {
  console.log('\n✗ plugins.js não encontrado');
}

// 3. plugins-funcional.js (deve ser removido)
const pluginsFuncPath = path.join(process.cwd(), 'config', 'plugins-funcional.js');
if (fs.existsSync(pluginsFuncPath)) {
  console.log('\n⚠️ plugins-funcional.js encontrado (remova para evitar conflitos)');
}

// 4. config/env/
const envPath = path.join(process.cwd(), 'config', 'env');
if (fs.existsSync(envPath)) {
  console.log('\n⚠️ Pasta config/env encontrada (verifique sobrescritas de configuração)');
}

// 5. src/extensions/upload/
const extUploadPath = path.join(process.cwd(), 'src', 'extensions', 'upload');
if (fs.existsSync(extUploadPath)) {
  console.log('\n✓ src/extensions/upload/ existe');
  const files = fs.readdirSync(extUploadPath);
  if (files.length) {
    console.log('  Arquivos encontrados:', files.join(', '));
  } else {
    console.log('  (Pasta está vazia)');
  }
}

// 6. src/provider/r2-upload/index.js
const providerPath = path.join(process.cwd(), 'src', 'provider', 'r2-upload', 'index.js');
if (fs.existsSync(providerPath)) {
  console.log('\n✓ Provider customizado r2-upload encontrado');
}

// 7. Banco de dados (PostgreSQL)
console.log('\nBanco de dados:');
if (process.env.PGHOST) {
  console.log('  PostgreSQL configurado via variáveis PGHOST, PGUSER, etc.');
} else {
  console.log('  ⚠️ Variáveis do PostgreSQL não encontradas.');
}

// 8. Arquivos residuais
const configFiles = fs.readdirSync(path.join(process.cwd(), 'config'));
const residuals = configFiles.filter(f => f.endsWith('-funcional.js') || f.endsWith('.bak') || f.endsWith('.old'));
if (residuals.length) {
  console.log('\n⚠️ Arquivos residuais em config/:', residuals.join(', '));
}

console.log('\nDiagnóstico concluído.');
console.log('Ações recomendadas:');
console.log('- Remova arquivos de configuração duplicados ou antigos.');
console.log('- Confirme se plugins.js está correto e único.');
console.log('- Verifique logs do Strapi para garantir que customPath está sendo executado.');
console.log('- Reinicie o servidor após alterações.');


scripts\test-r2-reference.js

// scripts/test-r2-reference.js
const dotenv = require('dotenv');
dotenv.config();

async function testR2Reference(strapi, testUrl) {
  console.log('=== TESTE DE REFERENCIAMENTO DE IMAGENS R2 ===');

  try {
    const r2Url = testUrl || 'https://images.softmeat.com.br/produtos/bacon-12345.jpg';
    const fileData = {
      name: 'teste-referencia.jpg',
      url: r2Url,
      mime: 'image/jpeg',
      size: 10240,
      ext: '.jpg',
    };

    if (!strapi?.plugin) {
      console.error('❌ Strapi não está disponível no contexto. Execute via Strapi.');
      return;
    }

    const uploadService = strapi.plugin('upload').service('upload');
    if (!uploadService || !uploadService.upload) {
      console.error('❌ Serviço de upload não disponível.');
      return;
    }

    const result = await uploadService.upload({
      data: { fileInfo: fileData },
      files: {}
    });

    console.log('Resultado do teste:');
    console.log(' - URL:', result?.url);
    console.log(' - Provider:', result?.provider);
    console.log(' - Tamanho:', result?.size);
    console.log(' - isExternalUrl:', result?.isExternalUrl);

    if (result?.url === r2Url) {
      console.log('✅ SUCESSO! A URL original foi preservada');
    } else {
      console.log('❌ FALHA! A URL foi modificada');
    }

  } catch (error) {
    console.error('Erro durante o teste:', error);
  }
}

module.exports = { testR2Reference };

// Instruções de uso:
// 1. Acesse o console do Strapi:
//    npx strapi console
// 2. Execute o teste:
//    await require('./scripts/test-r2-reference.js').testR2Reference(strapi, 'https://images.softmeat.com.br/produtos/bacon-12345.jpg');


scripts\test-strapi-upload-active.js

// scripts/test-strapi-upload-active.js
const dotenv = require('dotenv');
dotenv.config();

async function testStrapiUploadActive(strapi) {
  console.log('=== TESTE DE UPLOAD ATIVO DO STRAPI ===');

  try {
    // 1. Descobrir provider ativo do upload
    let providerName = null;
    let providerConfig = null;
    let customPathFunc = null;

    // Tenta pelo plugin oficial
    if (strapi?.plugin?.('upload')?.provider) {
      providerName = strapi.plugin('upload').provider;
      providerConfig = strapi.plugin('upload').providerConfig;
    } else if (strapi?.plugins?.upload?.provider) {
      providerName = strapi.plugins.upload.provider;
      providerConfig = strapi.plugins.upload.providerConfig;
    }

    // Tenta acessar o customPath
    const uploadConfig = strapi.config.get('plugin.upload');
    if (uploadConfig?.actionOptions?.upload?.customPath) {
      customPathFunc = uploadConfig.actionOptions.upload.customPath;
    }

    console.log('Provider ativo:', providerName || '(não detectado)');
    console.log('Configuração do provider:', providerConfig || '(não detectada)');
    console.log('Função customPath está presente:', !!customPathFunc);

    // 2. Simula um upload para testar o customPath
    if (customPathFunc) {
      const fakeFile = {
        name: 'Teste_Árvore-çãõ.jpg',
        hash: '123abc',
        ext: '.jpg',
        related: [{ ref: 'api::produto.produto' }],
        mime: 'image/jpeg',
        path: null,
      };
      const resultPath = customPathFunc(fakeFile);
      console.log('Resultado do customPath para arquivo de teste:', resultPath);
    } else {
      console.log('customPath não está configurado na actionOptions.upload.');
    }

    // 3. Verifica se existe provider customizado carregado
    try {
      const customProvider = require('../src/provider/r2-upload/index.js');
      if (customProvider) {
        console.log('⚠️ Provider customizado r2-upload está presente no projeto!');
      }
    } catch (err) {
      // Não existe ou não foi carregado
    }

    // 4. Testa upload real se desejado
    // (Opcional: pode-se simular upload real se desejar, mas para diagnóstico basta o acima)

  } catch (error) {
    console.error('Erro durante o teste:', error);
  }
}

module.exports = { testStrapiUploadActive };

// Instruções de uso:
// 1. Acesse o console do Strapi:
//    npx strapi console
// 2. Execute o teste:
//    await require('./scripts/test-strapi-upload-active.js').testStrapiUploadActive(strapi);


src\admin\app.example.js

const config = {
  locales: [
    // 'ar',
    // 'fr',
    // 'cs',
    // 'de',
    // 'dk',
    // 'es',
    // 'he',
    // 'id',
    // 'it',
    // 'ja',
    // 'ko',
    // 'ms',
    // 'nl',
    // 'no',
    // 'pl',
    // 'pt-BR',
    // 'pt',
    // 'ru',
    // 'sk',
    // 'sv',
    // 'th',
    // 'tr',
    // 'uk',
    // 'vi',
    // 'zh-Hans',
    // 'zh',
  ],
};

const bootstrap = (app) => {
  console.log(app);
};

export default {
  config,
  bootstrap,
};


src\admin\app.js

const config = {
  locales: ['pt-BR'],
  translations: {
    'pt-BR': {
      'app.components.LeftMenu.navbrand.title': 'SoftMeat Dashboard',
      'Content Manager': 'Gerenciador de Conteúdo',
      'app.components.LeftMenu.collection.title': 'Tipos de Coleção',
      'Settings.permissions': 'Permissões',
      'Settings.roles': 'Funções',
      'Settings.users': 'Usuários',
      'notification.success.saved': 'Salvo com sucesso',
      'global.save': 'Salvar',
      'global.delete': 'Deletar',
      'global.back': 'Voltar',
      'global.cancel': 'Cancelar',
    },
  },
};


src\admin\webpack.config.example.js

'use strict';

/* eslint-disable no-unused-vars */
module.exports = (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it
  // Perform customizations to webpack config
  // Important: return the modified config
  return config;
};


src\api\carrossel-treinamento\content-types\carrossel-treinamento\schema.json

{
  "kind": "collectionType",
  "collectionName": "carrossel_treinamentos",
  "info": {
    "singularName": "carrossel-treinamento",
    "pluralName": "carrossel-treinamentos",
    "displayName": "Carrossel Treinamento"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "DepoimentosTreinamentos": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": true
    }
  }
}


src\api\carrossel-treinamento\controllers\carrossel-treinamento.js

'use strict';

/**
 * carrossel-treinamento controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::carrossel-treinamento.carrossel-treinamento');


src\api\carrossel-treinamento\routes\carrossel-treinamento.js

'use strict';

/**
 * carrossel-treinamento router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::carrossel-treinamento.carrossel-treinamento');


src\api\carrossel-treinamento\services\carrossel-treinamento.js

'use strict';

/**
 * carrossel-treinamento service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::carrossel-treinamento.carrossel-treinamento');


src\api\cliente\content-types\cliente\schema.json

{
  "kind": "collectionType",
  "collectionName": "clientes",
  "info": {
    "singularName": "cliente",
    "pluralName": "clientes",
    "displayName": "Clientes"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true
    },
    "Logo": {
      "allowedTypes": [
        "images"
      ],
      "type": "media",
      "multiple": false,
      "required": true
    },
    
    "Descricao_Case": {
      "type": "string",
      "required": true
    }
  }
}


src\api\cliente\controllers\cliente.js

'use strict';

/**
 * cliente controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::cliente.cliente');


src\api\cliente\routes\cliente.js

'use strict';

/**
 * cliente router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::cliente.cliente');


src\api\cliente\services\cliente.js

'use strict';

/**
 * cliente service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::cliente.cliente');


src\api\configuracao-geral\content-types\configuracao-geral\schema.json

{
  "kind": "collectionType",
  "collectionName": "configuracao_gerais",
  "info": {
    "singularName": "configuracao-geral",
    "pluralName": "configuracao-gerais",
    "displayName": "Configuracao Geral"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "LogoNavegacao": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\configuracao-geral\controllers\configuracao-geral.js

'use strict';

/**
 * configuracao-geral controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::configuracao-geral.configuracao-geral');


src\api\configuracao-geral\routes\configuracao-geral.js

'use strict';

/**
 * configuracao-geral router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::configuracao-geral.configuracao-geral');


src\api\configuracao-geral\services\configuracao-geral.js

'use strict';

/**
 * configuracao-geral service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::configuracao-geral.configuracao-geral');


src\api\cronograma\content-types\cronograma\schema.json

{
  "kind": "collectionType",
  "collectionName": "cronogramas",
  "info": {
    "singularName": "cronograma",
    "pluralName": "cronogramas",
    "displayName": "Cronogramas",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Data": {
      "type": "date",
      "required": true
    },
    "Cidade": {
      "type": "string",
      "required": true,
      "default": "Ribeirão Preto"
    },
    "Vagas_Totais": {
      "type": "integer",
      "required": true
    },
    "Vagas_Disponiveis": {
      "type": "integer"
    },
    "Ativo": {
      "type": "boolean",
      "default": true,
      "required": true
    },



    "treinamento": {
      "type": "relation",
      "relation": "oneToOne",
      "target": "api::treinamento.treinamento"
    }
  }
}



src\api\cronograma\controllers\cronograma.js

'use strict';

/**
 * cronograma controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::cronograma.cronograma');


src\api\cronograma\routes\cronograma.js

'use strict';

/**
 * cronograma router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::cronograma.cronograma');


src\api\cronograma\services\cronograma.js

'use strict';

/**
 * cronograma service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::cronograma.cronograma');


src\api\curso-online\content-types\curso-online\schema.json

{
  "kind": "collectionType",
  "collectionName": "cursos_online",
  "info": {
    "singularName": "curso-online",
    "pluralName": "cursos-online",
    "displayName": "Cursos Online"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "slug": {
      "type": "uid",
      "targetField": "Nome",
      "required": true
    },
    "Categoria": {
      "type": "enumeration",
      "enum": [
        "Básico",
        "Intermediário",
        "Avançado",
        "Especialização"
      ]
    },
    "Descricao_Catalogo": {
      "type": "text",
      "required": true
    },
    "Descricao": {
      "type": "richtext",
      "required": true
    },
    "Link_Hotmart": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "Imagem": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": ["images"]
    },
    "Ordem_Exibicao": {
      "type": "integer",
      "default": 999
    },
    "Destaque": {
      "type": "boolean",
      "default": false,
      "required": true
    },
    "Meta_Title": {
      "type": "string"
    },
    "Meta_Description": {
      "type": "text"
    }
  }
}


src\api\curso-online\controllers\curso-online.js

'use strict';

/**
 * curso-online controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::curso-online.curso-online');


src\api\curso-online\routes\curso-online.js

'use strict';

/**
 * curso-online router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::curso-online.curso-online');


src\api\curso-online\services\curso-online.js

'use strict';

/**
 * curso-online service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::curso-online.curso-online');


src\api\hero-consultoria\content-types\hero-consultoria\schema.json

{
  "kind": "collectionType",
  "collectionName": "hero_consultorias",
  "info": {
    "singularName": "hero-consultoria",
    "pluralName": "hero-consultorias",
    "displayName": "Hero Consultoria"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Consultor": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\hero-consultoria\controllers\hero-consultoria.js

'use strict';

/**
 * hero-consultoria controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::hero-consultoria.hero-consultoria');


src\api\hero-consultoria\routes\hero-consultoria.js

'use strict';

/**
 * hero-consultoria router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::hero-consultoria.hero-consultoria');


src\api\hero-consultoria\services\hero-consultoria.js

'use strict';

/**
 * hero-consultoria service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::hero-consultoria.hero-consultoria');


src\api\home-consultoria\content-types\home-consultoria\schema.json

{
  "kind": "collectionType",
  "collectionName": "home_consultorias",
  "info": {
    "singularName": "home-consultoria",
    "pluralName": "home-consultorias",
    "displayName": "Home Consultoria"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "ConsultoriaPage": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\home-consultoria\controllers\home-consultoria.js

'use strict';

/**
 * home-consultoria controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::home-consultoria.home-consultoria');


src\api\home-consultoria\routes\home-consultoria.js

'use strict';

/**
 * home-consultoria router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::home-consultoria.home-consultoria');


src\api\home-consultoria\services\home-consultoria.js

'use strict';

/**
 * home-consultoria service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::home-consultoria.home-consultoria');


src\api\home-hero\content-types\home-hero\schema.json

{
  "kind": "collectionType",
  "collectionName": "home_heroes",
  "info": {
    "singularName": "home-hero",
    "pluralName": "home-heroes",
    "displayName": "Home Hero",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "PageHero": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ]
    }
  }
}


src\api\home-hero\controllers\home-hero.js

'use strict';

/**
 * home-hero controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::home-hero.home-hero');


src\api\home-hero\routes\home-hero.js

'use strict';

/**
 * home-hero router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::home-hero.home-hero');


src\api\home-hero\services\home-hero.js

'use strict';

/**
 * home-hero service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::home-hero.home-hero');


src\api\home-treinamento\content-types\home-treinamento\schema.json

{
  "kind": "collectionType",
  "collectionName": "home_treinamentos",
  "info": {
    "singularName": "home-treinamento",
    "pluralName": "home-treinamentos",
    "displayName": "Home Treinamento"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "TreinamentoPage": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\home-treinamento\controllers\home-treinamento.js

'use strict';

/**
 * home-treinamento controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::home-treinamento.home-treinamento');


src\api\home-treinamento\routes\home-treinamento.js

'use strict';

/**
 * home-treinamento router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::home-treinamento.home-treinamento');


src\api\home-treinamento\services\home-treinamento.js

'use strict';

/**
 * home-treinamento service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::home-treinamento.home-treinamento');


src\api\index-destaque\content-types\index-destaque\schema.json

{
  "kind": "singleType",
  "collectionName": "index_destaques",
  "info": {
    "singularName": "index-destaque",
    "pluralName": "index-destaques",
    "displayName": "Index Destaques",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "cursos_em_destaque": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::curso-online.curso-online"
    },
    "Imagem": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": ["images"]
    },
    "produtos_em_destaque": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::produto.produto"
    }
  }
}


src\api\index-destaque\controllers\index-destaque.js

'use strict';

/**
 * index-destaque controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::index-destaque.index-destaque');


src\api\index-destaque\routes\index-destaque.js

'use strict';

/**
 * index-destaque router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::index-destaque.index-destaque');


src\api\index-destaque\services\index-destaque.js

'use strict';

/**
 * index-destaque service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::index-destaque.index-destaque');


src\api\media-reference\controllers\media-reference.js

// src/api/media-reference/controllers/media-reference.js
'use strict';

module.exports = {
  async reference(ctx) {
    try {
      const { url, name, caption, alternativeText } = ctx.request.body;

      if (!url) {
        return ctx.badRequest('URL é obrigatória');
      }

      // Criar o objeto de referência
      const fileData = {
        fileInfo: {
          name: name || url.split('/').pop(),
          url,
          caption,
          alternativeText,
          isExternalUrl: true
        }
      };

      // Usar o serviço de upload existente
      const file = await strapi.plugins.upload.services.upload.upload(fileData);

      return {
        success: true,
        file
      };
    } catch (error) {
      console.error('[Media Reference] Erro:', error);
      return ctx.badRequest('Erro ao referenciar mídia', { error: error.message });
    }
  }
};


src\api\media-reference\routes\media-reference.js

// src/api/media-reference/routes/media-reference.js
'use strict';

module.exports = {
  routes: [
    {
      method: 'POST',
      path: '/api/media/reference',
      handler: 'media-reference.reference',
      config: {
        policies: [],
        description: 'Referencia uma mídia externa por URL'
      }
    }
  ]
};


src\api\produto\content-types\produto\schema.json

{
  "kind": "collectionType",
  "collectionName": "produtos",
  "info": {
    "singularName": "produto",
    "pluralName": "produtos",
    "displayName": "Produtos",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "slug": {
      "type": "uid",
      "targetField": "Nome"
    },
    "Categoria": {
      "type": "enumeration",
      "enum": [
        "Maturados",
        "Fermentados",
        "Defumados",
        "Cozidos",
        "Frescais"
      ],
      "required": true
    },
    "Descricao_Catalogo": {
      "type": "string",
      "required": true
    },
    "Descricao": {
      "type": "richtext",
      "required": true
    },
    "Link_Mercado_Livre": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "Imagem": {
      "type": "media",
      "multiple": true,
      "required": false,
      "allowedTypes": [
        "images"
      ]
    },
    "Destaque": {
      "type": "boolean",
      "default": false,
      "required": true
    },
    "Meta_File": {
      "type": "string"
    },
    "Meta_Description": {
      "type": "text"
    },
    "Disponivel": {
      "type": "boolean",
      "default": true,
      "required": true
    }
  }
}


src\api\produto\controllers\produto.js

'use strict';

/**
 * produto controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::produto.produto');


src\api\produto\routes\produto.js

'use strict';

/**
 * produto router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::produto.produto');


src\api\produto\services\produto.js

'use strict';

/**
 * produto service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::produto.produto');


src\api\sobre-carrossel\content-types\sobre-carrossel\schema.json

{
  "kind": "collectionType",
  "collectionName": "sobre_carrosseis",
  "info": {
    "singularName": "sobre-carrossel",
    "pluralName": "sobre-carrosseis",
    "displayName": "Sobre Carrossel"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Titulo": {
      "type": "string"
    },
    "Imagens": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": true
    }
  }
}


src\api\sobre-carrossel\controllers\sobre-carrossel.js

'use strict';

/**
 * sobre-carrossel controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::sobre-carrossel.sobre-carrossel');


src\api\sobre-carrossel\routes\sobre-carrossel.js

'use strict';

/**
 * sobre-carrossel router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::sobre-carrossel.sobre-carrossel');


src\api\sobre-carrossel\services\sobre-carrossel.js

'use strict';

/**
 * sobre-carrossel service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::sobre-carrossel.sobre-carrossel');


src\api\testemunho\content-types\testemunho\schema.json

{
  "kind": "collectionType",
  "collectionName": "testemunhos",
  "info": {
    "singularName": "testemunho",
    "pluralName": "testemunhos",
    "displayName": "Testemunhos"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true
    },
    "Imagem": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": ["images"]
    },
    "Foto": {
      "allowedTypes": [
        "images"
      ],
      "type": "media",
      "multiple": false,
      "required": true
    },
    "Depoimento": {
      "type": "text"
    },
    "curso_realizado": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::treinamento.treinamento"
    },
    "LinkedIn": {
      "type": "string"
    },
    "Instagram": {
      "type": "string"
    },
    "Facebook": {
      "type": "string"
    },
    "Cargo": {
      "type": "string"
    },
    "Empresa": {
      "type": "string"
    },
    "Ativo": {
      "type": "boolean",
      "default": true
    }
  }
}


src\api\testemunho\controllers\testemunho.js

'use strict';

/**
 * testemunho controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::testemunho.testemunho');


src\api\testemunho\routes\testemunho.js

'use strict';

/**
 * testemunho router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::testemunho.testemunho');


src\api\testemunho\services\testemunho.js

'use strict';

/**
 * testemunho service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::testemunho.testemunho');


src\api\treinamento\content-types\treinamento\schema.json

{
  "kind": "collectionType",
  "collectionName": "treinamentos",
  "info": {
    "singularName": "treinamento",
    "pluralName": "treinamentos",
    "displayName": "Treinamentos",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true
    },
    "Nivel": {
      "type": "enumeration",
      "enum": [
        "Basico",
        "Intermediario",
        "Avancado"
      ],
      "required": true
    },
    "Duracao": {
      "type": "integer",
      "required": true,
      "default": 1
    },
    "Descricao_Catalogo": {
      "type": "text",
      "required": true
    },
    "Topicos": {
      "type": "richtext",
      "required": true
    },
    "Ativo": {
      "type": "boolean",
      "default": false,
      "required": true
    },
    "Ordem": {
      "type": "integer"
    },
    "Meta_Title": {
      "type": "text"
    },
    "Meta_Description": {
      "type": "text"
    }
  }
}


src\api\treinamento\controllers\treinamento.js

'use strict';

/**
 * treinamento controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::treinamento.treinamento');


src\api\treinamento\routes\treinamento.js

'use strict';

/**
 * treinamento router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::treinamento.treinamento');


src\api\treinamento\services\treinamento.js

'use strict';

/**
 * treinamento service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::treinamento.treinamento');


src\index.js

module.exports = {
  register(strapi) {
    console.log('=== VERIFICAÇÃO DE AMBIENTE DE PRODUÇÃO ===');
    console.log('NODE_ENV:', process.env.NODE_ENV);
    console.log('DATABASE_CLIENT:', process.env.DATABASE_CLIENT);

    console.log('=== CONFIGURAÇÃO R2 ===');
    console.log('R2_ACCESS_KEY configurado:', !!process.env.R2_ACCESS_KEY);
    console.log('R2_SECRET_KEY configurado:', !!process.env.R2_SECRET_KEY);
    console.log('R2_ENDPOINT:', process.env.R2_ENDPOINT);
    console.log('R2_BUCKET:', process.env.R2_BUCKET);
    console.log('R2_PUBLIC_URL:', process.env.R2_PUBLIC_URL);

    // Removida a linha problemática que usava path.dirname com valor undefined
  },

  bootstrap(strapi) {
    console.log(`Strapi iniciado em ${process.env.NODE_ENV} mode`);
  }
};


src\middlewares\custom-naming.js

// src/middlewares/custom-naming.js
'use strict';

module.exports = (strapi) => ({
  initialize() {
    strapi.app.use(async (ctx, next) => {
      if (ctx.path.startsWith('/upload')) {
        // Sua lógica personalizada aqui
      }
      await next();
    });
  }
});


src\middlewares\upload-debug.js

module.exports = (config, { strapi }) => {
  return async (ctx, next) => {
    if (ctx.request.url.includes('/upload') && ctx.request.method === 'POST') {
      console.log('=== INTERCEPTANDO REQUISIÇÃO DE UPLOAD ===');
      console.log('Tamanho do corpo:', ctx.request.body ? 'Presente' : 'Ausente');
      console.log('Content-Type:', ctx.request.headers['content-type']);
      console.log('Content-Length:', ctx.request.headers['content-length']);

      try {
        await next();

        console.log('=== RESPOSTA DE UPLOAD ===');
        console.log('Status:', ctx.response.status);
        console.log('Tipo de resposta:', typeof ctx.response.body);
      } catch (error) {
        console.error('=== ERRO NO UPLOAD ===');
        console.error('Mensagem:', error.message);
        console.error('Stack:', error.stack);
        throw error;
      }
    } else {
      await next();
    }
  };
};


src\middlewares\upload-logger.js

// src/middlewares/upload-logger.js
module.exports = (config, strapi) => {
  return async (ctx, next) => {
    if (ctx.request.url.includes('upload') && ctx.request.method === 'POST') {
      console.log('=== INÍCIO DE UPLOAD ===');
      console.log('Dados do arquivo:', ctx.request.files?.files?.map(f => ({
        name: f.name,
        size: f.size,
        type: f.type,
        hash: f.hash
      })));

      try {
        await next();
        console.log('=== RESPOSTA DE UPLOAD ===');
        console.log('Status:', ctx.response.status);
        if (ctx.response.body?.length) {
          console.log('Arquivos processados:', ctx.response.body.map(f => ({
            name: f.name,
            url: f.url,
            hash: f.hash
          })));
        }
      } catch (error) {
        console.error('=== ERRO DE UPLOAD ===', error.message);
        throw error;
      }
    } else {
      await next();
    }
  };
};


src\utils\r2.js

// src/utils/r2.js - versão melhorada
'use strict';

/**
 * Utilitários para manipulação de URLs do Cloudflare R2
 */

/**
 * Formata um caminho de arquivo para uma URL R2 completa
 * @param {string} path - Caminho relativo do arquivo no bucket
 * @returns {string} URL formatada
 */
const formatR2Url = (path) => {
  if (!path) return '';

  // Sanitizar o caminho
  const cleanPath = String(path).startsWith('/') ? path.substring(1) : path;

  // Usar domínio personalizado se disponível
  if (process.env.CF_PUBLIC_ACCESS_URL) {
    const domain = process.env.CF_PUBLIC_ACCESS_URL.endsWith('/')
      ? process.env.CF_PUBLIC_ACCESS_URL.slice(0, -1)
      : process.env.CF_PUBLIC_ACCESS_URL;
    return `${domain}/${cleanPath}`;
  }

  // Fallback para URL direta do R2
  if (process.env.CF_ENDPOINT && process.env.CF_BUCKET) {
    const endpoint = process.env.CF_ENDPOINT.endsWith('/')
      ? process.env.CF_ENDPOINT.slice(0, -1)
      : process.env.CF_ENDPOINT;
    return `${endpoint}/${process.env.CF_BUCKET}/${cleanPath}`;
  }

  // Se tudo falhar, retornar o caminho como está
  console.warn('[R2 URL Formatter] Configuração R2 incompleta, usando caminho original');
  return path;
};

module.exports = {
  formatR2Url
};


src\utils\r2Helper.js

'use strict';

/**
 * Utilitários para auxiliar no tratamento de URLs do R2
 */

const isR2Url = (url) => {
  if (!url) return false;

  const r2Patterns = [
    'images.softmeat.com.br',
    '.r2.cloudflarestorage.com',
    process.env.CF_PUBLIC_ACCESS_URL,
    process.env.R2_CUSTOM_DOMAIN
  ].filter(Boolean);

  return r2Patterns.some(pattern => pattern && url.includes(pattern));
};

const formatR2Url = (url) => {
  if (!url || !isR2Url(url)) return url;

  // Se já estiver usando o domínio público, retornar como está
  if (process.env.CF_PUBLIC_ACCESS_URL && url.includes(process.env.CF_PUBLIC_ACCESS_URL)) {
    return url;
  }

  // Se estiver usando o endpoint direto do R2, converter para domínio público
  if (process.env.CF_ENDPOINT && process.env.CF_BUCKET && url.includes(process.env.CF_ENDPOINT)) {
    const publicUrl = process.env.CF_PUBLIC_ACCESS_URL;
    if (!publicUrl) return url;

    const cleanPublicUrl = publicUrl.endsWith('/') ? publicUrl.slice(0, -1) : publicUrl;

    // Extrair o caminho do objeto no bucket
    const regex = new RegExp(`.*?${process.env.CF_BUCKET}/?(.*)`, 'i');
    const match = url.match(regex);

    if (match && match[1]) {
      return `${cleanPublicUrl}/${match[1]}`;
    }
  }

  return url;
};

module.exports = {
  isR2Url,
  formatR2Url
};


