# Estrutura do Projeto SoftMeat - backend

├── public
│   ├── uploads
│   │   ├── Clientes
│   │   ├── Cursos
│   │   ├── Produtos
│   │   │   ├── Bacon
│   │   │   ├── Blumenau
│   │   │   ├── Copa
│   │   │   ├── Pastrami
│   │   │   └── Salame
│   │   ├── Testemunhos
├── src
│   ├── admin
│   ├── api
│   │   ├── carrossel-treinamento
│   │   │   ├── content-types
│   │   │   │   └── carrossel-treinamento
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── cliente
│   │   │   ├── content-types
│   │   │   │   └── cliente
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── cronograma
│   │   │   ├── content-types
│   │   │   │   └── cronograma
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── curso-online
│   │   │   ├── content-types
│   │   │   │   └── curso-online
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── hero-consultoria
│   │   │   ├── content-types
│   │   │   │   └── hero-consultoria
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── home-consultoria
│   │   │   ├── content-types
│   │   │   │   └── home-consultoria
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── home-hero
│   │   │   ├── content-types
│   │   │   │   └── home-hero
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── home-treinamento
│   │   │   ├── content-types
│   │   │   │   └── home-treinamento
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── index-destaque
│   │   │   ├── content-types
│   │   │   │   └── index-destaque
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── produto
│   │   │   ├── content-types
│   │   │   │   └── produto
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── sobre-carrossel
│   │   │   ├── content-types
│   │   │   │   └── sobre-carrossel
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── testemunho
│   │   │   ├── content-types
│   │   │   │   └── testemunho
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   │   ├── treinamento
│   │   │   ├── content-types
│   │   │   │   └── treinamento
│   │   │   ├── controllers
│   │   │   ├── routes
│   │   │   └── services
│   ├── extensions
│   │   ├── upload
│   │   │   ├── services
│   ├── utils
├── .env
├── package.json


.env

# Configuração do Servidor
HOST=0.0.0.0
PORT=1337
APP_KEYS=2VJlAoWpXfzDHzGqX7IVTA==,QSdu6uWUfiOcoPe5SgRI+w==,I9GT5I/hmBtES9PgklJFow==,W6LM3JinQfZ6BN/+u5aFSA==
API_TOKEN_SALT=isFissNnC7p/4U1GpNnMDA==
ADMIN_JWT_SECRET=E4rq8HGv9avD80L7hXY8TA==
TRANSFER_TOKEN_SALT=EQ/v2sGIMohFSsL9Tg7gww==
JWT_SECRET=vDZKwN6GXEPTfdIC8Aijrg==
DATABASE_CLIENT=sqlite
DATABASE_FILENAME=.tmp/data.db
URL=http://localhost:1337
PUBLIC_URL=http://localhost:1337
WEBHOOKS_POPULATE_RELATIONS=false

# Configurações R2
R2_ACCESS_KEY=ac7dbce38cf86a9df0239e0d1973aa6c
R2_SECRET_KEY=79f513ca8cb364f64b2ea1a4a042b925e83f3cdd8aacb21f0f2967742fddc189
R2_ENDPOINT=https://950693b7edbd202561c3d20e4a036247.r2.cloudflarestorage.com
R2_BUCKET=softmeat-dev
R2_REGION=auto
R2_CUSTOM_DOMAIN=https://images.softmeat.com.br

CF_ACCESS_KEY_ID=ac7dbce38cf86a9df0239e0d1973aa6c
CF_ACCESS_SECRET=79f513ca8cb364f64b2ea1a4a042b925e83f3cdd8aacb21f0f2967742fddc189
CF_ENDPOINT=https://950693b7edbd202561c3d20e4a036247.r2.cloudflarestorage.com
CF_BUCKET=softmeat-dev
CF_PUBLIC_ACCESS_URL=https://images.softmeat.com.br


backup-cloudinary-migration\config_middlewares.js

module.exports = [
  'strapi::errors',
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:', 'http:', 'res.cloudinary.com', '*.r2.cloudflarestorage.com', 'img.softmeat.com.br'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            '*.cloudinary.com',
            'res.cloudinary.com',
            '*.r2.cloudflarestorage.com',
            'img.softmeat.com.br'
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            '*.cloudinary.com',
            'res.cloudinary.com',
            '*.r2.cloudflarestorage.com',
            'img.softmeat.com.br'
          ],
          'script-src': ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
          'frame-ancestors': null,
          upgradeInsecureRequests: null,
        },
        'default-src': ["'self'", '*.cloudinary.com', 'res.cloudinary.com', '*.r2.cloudflarestorage.com', 'img.softmeat.com.br'],
      },
      frameguard: false,
    },
  },
  {
    name: 'strapi::cors',
    config: {
      enabled: true,
      headers: '*',
      origin: [
        'http://localhost:1337',
        'http://localhost:3000',
        'http://localhost:4321',
        'https://softmeat.com.br',
        'https://www.softmeat.com.br',
        'https://softmeat-backend-production.up.railway.app',
        'https://softmeat.pages.dev',
        'https://res.cloudinary.com',
        'https://img.softmeat.com.br',
        'https://*.r2.cloudflarestorage.com'
      ],
      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
      keepHeaderOnError: true,
      credentials: true,
      maxAge: 31536000,
      exposedHeaders: ['Content-Range', 'X-Content-Range']
    },
  },
  'strapi::poweredBy',
  'strapi::logger',
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];


backup-cloudinary-migration\config_middlewares_debug.js

// config/middlewares/debug.js
module.exports = (config, { strapi }) => {
  strapi.log.info("============ DEBUG ENVIRONMENT VARIABLES ============");
  strapi.log.info("R2_ENDPOINT:", process.env.R2_ENDPOINT);
  strapi.log.info("R2_BUCKET:", process.env.R2_BUCKET);
  strapi.log.info("R2_CUSTOM_DOMAIN:", process.env.R2_CUSTOM_DOMAIN);

  // Verificar se as variáveis do Cloudinary ainda existem
  strapi.log.info("CLOUDINARY_NAME:", process.env.CLOUDINARY_NAME);

  return async (ctx, next) => {
    // Continuar para o próximo middleware
    await next();
  };
};


config\admin.js

module.exports = ({ env }) => ({
  auth: {
    secret: env('ADMIN_JWT_SECRET'),
  },
  apiToken: {
    salt: env('API_TOKEN_SALT'),
  },
  transfer: {
    token: {
      salt: env('TRANSFER_TOKEN_SALT'),
    },
  },
  flags: {
    nps: env.bool('FLAG_NPS', false),
    promoteEE: env.bool('FLAG_PROMOTE_EE', false),
  },
  watchIgnoreFiles: [
    '**/config/sync/**',
  ],
});


config\api.js

module.exports = {
  rest: {
    defaultLimit: 25,
    maxLimit: 100,
    withCount: true,
  },
  responses: {
    privateAttributes: ['_v', 'id', 'created_at'],
  },
  webhook: {
    populateRelations: false,
  },
};


config\database.js

const path = require("path");

module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: path.join(process.cwd(), env('DATABASE_FILENAME', '/opt/app/data/data.db')),
      useNullAsDefault: true,
      // Aumentando limites para suportar URLs longas do Cloudinary
      stringifyObjects: true,
      timezone: 'UTC',
      options: {
        maxVariables: 10000 // Aumenta limite de variáveis
      }
    },
    debug: false,
    pool: {
      min: 0,
      max: 1,
      acquireTimeoutMillis: 300000,
      createTimeoutMillis: 300000,
      destroyTimeoutMillis: 300000,
      idleTimeoutMillis: 300000,
      // Usando sintaxe correta do Knex para SQLite
      afterCreate: (conn, cb) => {
        conn.pragma('journal_mode = WAL');
        conn.pragma('synchronous = NORMAL');
        cb(null, conn);
      }
    },
    useNullAsDefault: true,
    migrations: {
      directory: path.join(process.cwd(), 'database/migrations')
    }
  }
});


config\functions\bootstrap.js

'use strict';

module.exports = () => {
  // Função de bootstrap
  strapi.log.info('Starting Strapi server...');

  // Configurações iniciais
  strapi.log.info('Checking database connection...');

  // Log de configurações importantes
  strapi.log.info(`Server URL: ${strapi.config.get('server.url', 'not set')}`);
  strapi.log.info(`Database Client: ${strapi.config.get('database.connection.client', 'not set')}`);
  strapi.log.info(`Database Path: ${strapi.config.get('database.connection.connection.filename', 'not set')}`);
};


config\middlewares\debug.js

// config/middlewares/debug.js
module.exports = (config, { strapi }) => {
  strapi.log.info("============ DEBUG ENVIRONMENT VARIABLES ============");
  strapi.log.info("R2_ENDPOINT:", process.env.R2_ENDPOINT);
  strapi.log.info("R2_BUCKET:", process.env.R2_BUCKET);
  strapi.log.info("R2_CUSTOM_DOMAIN:", process.env.R2_CUSTOM_DOMAIN);

  // Verificar se as variáveis do Cloudinary ainda existem
  // Referência ao Cloudinary removida

  return async (ctx, next) => {
    // Continuar para o próximo middleware
    await next();
  };
};


config\middlewares\r2.js

module.exports = ({ env }) => ({
  settings: {
    r2Storage: {
      enabled: true,
      config: {
        provider: '@strapi/provider-upload-aws-s3',
        providerOptions: {
          accessKeyId: env('R2_ACCESS_KEY'),
          secretAccessKey: env('R2_SECRET_KEY'),
          endpoint: env('R2_ENDPOINT'),
          params: {
            Bucket: env('R2_BUCKET'),
          },
          region: env('R2_REGION', 'auto'),
        },
      },
    },
  },
});


config\middlewares.js

module.exports = ({ env }) => [
  'strapi::errors',
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': [
            "'self'",
            'https:',
            'http:',
            '*.r2.cloudflarestorage.com',
            'images.softmeat.com.br',
            env("CF_PUBLIC_ACCESS_URL", "https://images.softmeat.com.br").replace(/^https?:\/\//, "")
          ],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            '*.r2.cloudflarestorage.com',
            'images.softmeat.com.br',
            env("CF_PUBLIC_ACCESS_URL", "https://images.softmeat.com.br").replace(/^https?:\/\//, ""),
            'market-assets.strapi.io'
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            '*.r2.cloudflarestorage.com',
            'images.softmeat.com.br',
            env("CF_PUBLIC_ACCESS_URL", "https://images.softmeat.com.br").replace(/^https?:\/\//, ""),
            'market-assets.strapi.io'
          ],
          'script-src': ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
          'frame-ancestors': null,
          upgradeInsecureRequests: null,
        },
      },
      frameguard: false,
    },
  },
  {
    name: 'strapi::cors',
    config: {
      enabled: true,
      headers: '*',
      origin: [
        'http://localhost:1337',
        'http://localhost:3000',
        'http://localhost:4321',
        'https://softmeat.com.br',
        'https://www.softmeat.com.br',
        'https://softmeat-backend-production.up.railway.app',
        'https://softmeat.pages.dev',
        'https://images.softmeat.com.br',
        env("CF_PUBLIC_ACCESS_URL", "https://images.softmeat.com.br"),
        'https://*.r2.cloudflarestorage.com'
      ],
      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
      keepHeaderOnError: true,
      credentials: true,
      maxAge: 31536000,
      exposedHeaders: ['Content-Range', 'X-Content-Range']
    },
  },
  'strapi::poweredBy',
  'strapi::logger',
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];


config\plugins.js

// config/plugins.js
module.exports = ({ env }) => ({
  'users-permissions': {
    config: {
      jwtSecret: env('JWT_SECRET'),
    },
  },
  upload: {
    config: {
      provider: "strapi-provider-cloudflare-r2",
      providerOptions: {
        accessKeyId: env("CF_ACCESS_KEY_ID", env('R2_ACCESS_KEY')),
        secretAccessKey: env("CF_ACCESS_SECRET", env('R2_SECRET_KEY')),
        endpoint: env("CF_ENDPOINT", env('R2_ENDPOINT')),
        params: {
          Bucket: env("CF_BUCKET", env('R2_BUCKET')),
          ACL: 'public-read',
        },
        region: env("CF_REGION", env('R2_REGION', 'auto')),
        /**
         * Set this Option to store the CDN URL of your files and not the R2 endpoint URL in your DB.
         * Can be used in Cloudflare R2 with Domain-Access or Public URL
         */
        cloudflarePublicAccessUrl: env("CF_PUBLIC_ACCESS_URL", env('R2_CUSTOM_DOMAIN', 'https://images.softmeat.com.br')),
        /**
         * Sets if all assets should be uploaded in the root dir regardless the strapi folder.
         */
        pool: false,
      },
      actionOptions: {
        upload: {
          ACL: 'public-read',
          // Função para personalizar o caminho de upload
          customPath: (file) => {
            console.log('Customizando caminho para upload:', file.name);

            // Detectar o tipo de recurso (imagem, vídeo, etc.)
            const resourceType = file.mime.startsWith('image/') ? 'images' :
                                file.mime.startsWith('video/') ? 'videos' :
                                file.mime.startsWith('audio/') ? 'audios' : 'files';

            console.log('Tipo de recurso:', resourceType);

            // Determinar a categoria com base no contexto do upload
            let category = 'geral';

            // Tenta determinar a categoria baseado no tipo de conteúdo relacionado
            if (file.related) {
              // Extrai o modelo de relacionamento
              const relatedType = file.related.split('.')[0];
              console.log('Tipo relacionado:', relatedType);

              switch (relatedType) {
                case 'produto':
                  category = 'produtos';
                  break;
                case 'curso-online':
                  category = 'cursos';
                  break;
                case 'testemunho':
                  category = 'testemunhos';
                  break;
                case 'cliente':
                  category = 'clientes';
                  break;
                case 'hero-consultoria':
                case 'home-consultoria':
                  category = 'consultoria';
                  break;
                case 'home-hero':
                case 'index-destaque':
                  category = 'index';
                  break;
                case 'sobre-carrossel':
                  category = 'institucional';
                  break;
                case 'carrossel-treinamento':
                case 'treinamento':
                case 'cronograma':
                case 'home-treinamento':
                  category = 'treinamentos';
                  break;
                default:
                  category = 'geral';
              }
            }

            console.log('Categoria:', category);

            // Gerar nome de arquivo único
            const extension = file.ext.startsWith('.') ? file.ext.substring(1) : file.ext;
            const timestamp = Date.now();
            const fileName = `${file.hash}-${timestamp}.${extension}`;

            // Gerar o caminho completo
            const path = `${resourceType}/${category}/${fileName}`;
            console.log('Caminho final:', path);

            return path;
          }
        },
        uploadStream: {
          ACL: 'public-read'
        },
        delete: {},
      },
    },
  },
});


config\server.js

module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  url: env('PUBLIC_URL', 'https://softmeat-backend-production.up.railway.app'),
  admin: {
    auth: {
      secret: env('ADMIN_JWT_SECRET'),
    },
    url: '/admin',
    autoOpen: false,
  },
  app: {
    keys: env.array('APP_KEYS'),
  },
  webhooks: {
    populateRelations: env.bool('WEBHOOKS_POPULATE_RELATIONS', false),
  },
});


package.json

{
  "name": "backend",
  "private": true,
  "version": "0.1.0",
  "description": "A Strapi application",
  "scripts": {
    "develop": "strapi develop",
    "start": "NODE_ENV=production strapi start",
    "build": "strapi build",
    "strapi": "strapi"
  },
  "dependencies": {
    "@strapi/plugin-i18n": "4.12.0",
    "@strapi/plugin-users-permissions": "4.12.0",
    "@strapi/provider-upload-aws-s3": "^4.25.20",
    "@strapi/strapi": "4.12.0",
    "better-sqlite3": "8.0.1",
    "sharp": "^0.33.5",
    "strapi-plugin-import-export-entries": "^1.23.1",
    "strapi-provider-cloudflare-r2": "^0.3.0"
  },
  "author": {
    "name": "A Strapi developer"
  },
  "strapi": {
    "uuid": "3289c097-8983-4dc0-817c-2192d4dfd468"
  },
  "engines": {
    "node": ">=14.19.1 <=18.x.x",
    "npm": ">=6.0.0"
  },
  "license": "MIT"
}


scripts\test-r2-connection.js

// test-r2-connection.js
const { S3Client, ListObjectsV2Command } = require('@aws-sdk/client-s3');
const dotenv = require('dotenv');
const path = require('path');

// Carregar variáveis de ambiente
dotenv.config({ path: path.resolve(__dirname, '../.env') });

// Verificar se as variáveis foram carregadas
console.log('Variáveis carregadas:');
console.log('R2_ACCESS_KEY existe:', !!process.env.R2_ACCESS_KEY);
console.log('R2_SECRET_KEY existe:', !!process.env.R2_SECRET_KEY);
console.log('R2_ENDPOINT:', process.env.R2_ENDPOINT);
console.log('R2_BUCKET:', process.env.R2_BUCKET);
console.log('R2_REGION:', process.env.R2_REGION || 'auto');
console.log('R2_CUSTOM_DOMAIN:', process.env.R2_CUSTOM_DOMAIN);

// Verificar se as variáveis essenciais estão presentes
if (!process.env.R2_ACCESS_KEY || !process.env.R2_SECRET_KEY || !process.env.R2_ENDPOINT || !process.env.R2_BUCKET) {
 console.error('Erro: Variáveis de ambiente R2 não encontradas!');
 console.error('Por favor, verifique se o arquivo .env contém as configurações do R2.');
 process.exit(1);
}

// Configurar o cliente R2
const r2Client = new S3Client({
 region: process.env.R2_REGION || 'auto',
 endpoint: process.env.R2_ENDPOINT,
 credentials: {
   accessKeyId: process.env.R2_ACCESS_KEY,
   secretAccessKey: process.env.R2_SECRET_KEY,
 },
});

async function testConnection() {
 try {
   console.log('\nTentando conectar ao R2...');

   // Listar objetos no bucket
   const command = new ListObjectsV2Command({
     Bucket: process.env.R2_BUCKET,
     MaxKeys: 10, // Limitando a 10 objetos para teste
   });

   const response = await r2Client.send(command);

   console.log(`\nConexão com R2 bem-sucedida!`);
   console.log(`Encontrados ${response.Contents?.length || 0} objetos:`);

   // Mostrar alguns objetos
   (response.Contents || []).forEach((obj, index) => {
     console.log(`${index + 1}. ${obj.Key} (${obj.Size} bytes)`);

     // Construir URL usando o domínio personalizado
     const customUrl = `${process.env.R2_CUSTOM_DOMAIN}/${obj.Key}`;
     console.log(`   URL custom: ${customUrl}`);

     // Construir URL direta do R2
     const directUrl = `${process.env.R2_ENDPOINT}/${process.env.R2_BUCKET}/${obj.Key}`;
     console.log(`   URL direta: ${directUrl}`);
   });

 } catch (error) {
   console.error('Erro ao conectar com R2:', error);
 }
}

testConnection();


scripts\test-r2-provider.js

// scripts/test-r2-provider.js
// Script para testar a configuração do provider R2
require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { S3Client, PutObjectCommand, GetObjectCommand, ListObjectsV2Command } = require('@aws-sdk/client-s3');

// Cores para console
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Configurações
const testFilePath = path.join(__dirname, 'test-file.txt');
const testFileKey = `test/provider-test-${Date.now()}.txt`;

// Criar o arquivo de teste
fs.writeFileSync(testFilePath, `Teste de upload para R2 - ${new Date().toISOString()}`);

// Configurar cliente R2
const s3Client = new S3Client({
  region: 'auto',
  endpoint: process.env.CF_ENDPOINT,
  credentials: {
    accessKeyId: process.env.CF_ACCESS_KEY_ID,
    secretAccessKey: process.env.CF_ACCESS_SECRET,
  },
});

// Funções auxiliares
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// Teste de upload
async function testUpload() {
  log('\n=== TESTE DO PROVIDER STRAPI-PROVIDER-CLOUDFLARE-R2 ===', colors.magenta);

  // Verificar variáveis de ambiente
  log('\n[1] Verificando variáveis de ambiente:', colors.blue);
  const requiredVars = ['CF_ACCESS_KEY_ID', 'CF_ACCESS_SECRET', 'CF_ENDPOINT', 'CF_BUCKET', 'CF_PUBLIC_ACCESS_URL'];

  let missingVars = [];
  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      log(`  ❌ ${varName}: Não encontrada`, colors.red);
      missingVars.push(varName);
    } else {
      log(`  ✅ ${varName}: Configurada`);
    }
  }

  if (missingVars.length > 0) {
    log(`\n❌ As seguintes variáveis não estão configuradas: ${missingVars.join(', ')}`, colors.red);
    log('Por favor, configure-as no arquivo .env e tente novamente');
    return;
  }

  // Testar conexão e listagem
  log('\n[2] Testando conexão e listagem de objetos:', colors.blue);
  try {
    const listCommand = new ListObjectsV2Command({
      Bucket: process.env.CF_BUCKET,
      MaxKeys: 5
    });

    const listResponse = await s3Client.send(listCommand);
    log(`  ✅ Conexão estabelecida com sucesso`);
    log(`  ✅ Encontrados ${listResponse.Contents?.length || 0} objetos`);

    if (listResponse.Contents && listResponse.Contents.length > 0) {
      log(`\n  Exemplos de objetos:`);
      listResponse.Contents.slice(0, 3).forEach((obj, i) => {
        log(`  ${i+1}. ${obj.Key} (${obj.Size} bytes)`);

        // Construir URL direta e pública
        const directUrl = `${process.env.CF_ENDPOINT}/${process.env.CF_BUCKET}/${obj.Key}`;
        const publicUrl = `${process.env.CF_PUBLIC_ACCESS_URL}/${obj.Key}`;

        log(`     URL direta: ${directUrl}`);
        log(`     URL pública: ${publicUrl}`);
      });
    }
  } catch (error) {
    log(`  ❌ Erro ao conectar ao R2: ${error.message}`, colors.red);
    return;
  }

  // Testar upload
  log('\n[3] Testando upload de arquivo:', colors.blue);
  try {
    const fileContent = fs.readFileSync(testFilePath);

    const uploadCommand = new PutObjectCommand({
      Bucket: process.env.CF_BUCKET,
      Key: testFileKey,
      Body: fileContent,
      ContentType: 'text/plain',
      ACL: 'public-read'
    });

    await s3Client.send(uploadCommand);
    log(`  ✅ Arquivo enviado com sucesso`);

    // Construir URLs
    const directUrl = `${process.env.CF_ENDPOINT}/${process.env.CF_BUCKET}/${testFileKey}`;
    const publicUrl = `${process.env.CF_PUBLIC_ACCESS_URL}/${testFileKey}`;

    log(`  URL direta: ${directUrl}`);
    log(`  URL pública: ${publicUrl}`);

    // Testar download
    log('\n[4] Testando download do arquivo:', colors.blue);
    const getCommand = new GetObjectCommand({
      Bucket: process.env.CF_BUCKET,
      Key: testFileKey
    });

    const getResponse = await s3Client.send(getCommand);
    log(`  ✅ Arquivo recuperado com sucesso`);
    log(`  Content-Type: ${getResponse.ContentType}`);
    log(`  Content-Length: ${getResponse.ContentLength} bytes`);

    // Limpar
    fs.unlinkSync(testFilePath);
    log(`\n✅ Teste concluído com sucesso!`, colors.green);
    log(`O arquivo de teste foi enviado para: ${testFileKey}`);
    log(`\nPróximos passos:`);
    log(`1. Verifique se pode acessar a URL pública: ${publicUrl}`);
    log(`2. Configure o plugin no Strapi conforme documentação`);
    log(`3. Reinicie o servidor Strapi e teste o upload pelo painel admin`);
  } catch (error) {
    log(`  ❌ Erro durante o teste: ${error.message}`, colors.red);
  }
}

// Executar o teste
testUpload();


scripts\test-r2-upload.js

// test-r2-upload.js
// Script para testar o upload e URLs do R2 diretamente
const { S3Client, ListObjectsV2Command, PutObjectCommand } = require('@aws-sdk/client-s3');
const fs = require('fs');
const path = require('path');
const { formatR2Url } = require('../src/utils/r2');

// Carregar variáveis de ambiente
require('dotenv').config();

// Verificar variáveis configuradas
console.log('=== TESTE DE CONEXÃO R2 ===');
console.log('R2_ACCESS_KEY existe:', !!process.env.R2_ACCESS_KEY);
console.log('R2_SECRET_KEY existe:', !!process.env.R2_SECRET_KEY);
console.log('R2_ENDPOINT:', process.env.R2_ENDPOINT);
console.log('R2_BUCKET:', process.env.R2_BUCKET);
console.log('R2_REGION:', process.env.R2_REGION || 'auto');
console.log('R2_CUSTOM_DOMAIN:', process.env.R2_CUSTOM_DOMAIN);

// Configurar cliente R2
const r2Client = new S3Client({
  region: process.env.R2_REGION || 'auto',
  endpoint: process.env.R2_ENDPOINT,
  credentials: {
    accessKeyId: process.env.R2_ACCESS_KEY,
    secretAccessKey: process.env.R2_SECRET_KEY,
  },
});

// Função para testar listagem de arquivos
async function testListFiles() {
  try {
    console.log('\nTentando listar arquivos no bucket R2...');

    const command = new ListObjectsV2Command({
      Bucket: process.env.R2_BUCKET,
      MaxKeys: 5
    });

    const response = await r2Client.send(command);
    console.log(`✅ Sucesso! Encontrados ${response.Contents?.length || 0} arquivos\n`);

    // Mostrar alguns arquivos
    if (response.Contents && response.Contents.length > 0) {
      console.log('Exemplos de arquivos:');
      response.Contents.slice(0, 5).forEach((file, index) => {
        const url = formatR2Url(file.Key);
        console.log(`${index + 1}. ${file.Key} -> ${url}`);
      });
    }

    return true;
  } catch (error) {
    console.error('❌ Erro ao listar arquivos:', error.message);
    return false;
  }
}

// Função para testar upload de arquivo
async function testUpload() {
  try {
    console.log('\nTentando fazer upload de arquivo de teste para R2...');

    // Criar arquivo de teste
    const testFile = path.join(__dirname, 'test-file.txt');
    fs.writeFileSync(testFile, `Arquivo de teste gerado em ${new Date().toISOString()}`);

    // Configurar comando de upload
    const fileStream = fs.createReadStream(testFile);
    const fileKey = `test/test-upload-${Date.now()}.txt`;

    const uploadParams = {
      Bucket: process.env.R2_BUCKET,
      Key: fileKey,
      Body: fileStream,
      ContentType: 'text/plain',
      ACL: 'public-read'
    };

    // Enviar arquivo
    await r2Client.send(new PutObjectCommand(uploadParams));
    console.log('✅ Upload concluído com sucesso');

    // Mostrar URL
    const url = formatR2Url(fileKey);
    console.log(`URL do arquivo: ${url}`);

    // Limpar
    fs.unlinkSync(testFile);
    console.log('Arquivo de teste local removido');

    return true;
  } catch (error) {
    console.error('❌ Erro ao fazer upload:', error.message);
    return false;
  }
}

// Testar formatação de URLs
function testFormatUrls() {
  console.log('\nTeste de formatação de URLs:');

  const testPaths = [
    'images/test/example.jpg',
    '/images/product/photo.png',
    'videos/testimonials/video.mp4'
  ];

  for (const path of testPaths) {
    const url = formatR2Url(path);
    console.log(`${path} -> ${url}`);
  }
}

// Executar testes
async function runTests() {
  console.log('\n=== INICIANDO TESTES R2 ===');

  // Verificar variáveis necessárias
  if (!process.env.R2_ACCESS_KEY || !process.env.R2_SECRET_KEY ||
      !process.env.R2_ENDPOINT || !process.env.R2_BUCKET) {
    console.error('❌ Configuração incompleta. Verifique as variáveis de ambiente.');
    return;
  }

  // Testar formatação de URLs
  testFormatUrls();

  // Testar conexão e listagem
  const listSuccess = await testListFiles();

  // Testar upload se listagem for bem-sucedida
  if (listSuccess) {
    await testUpload();
  }

  console.log('\n=== TESTES CONCLUÍDOS ===');
}

// Executar todos os testes
runTests();

scripts\update-env.js

// scripts/update-env.js
// Este script atualiza o arquivo .env com as variáveis necessárias para o Cloudflare R2
const fs = require('fs');
const path = require('path');

const envPath = path.join(process.cwd(), '.env');

// Verificar se o arquivo .env existe
if (!fs.existsSync(envPath)) {
  console.error('\x1b[31mArquivo .env não encontrado. Crie o arquivo primeiro.\x1b[0m');
  process.exit(1);
}

// Ler o conteúdo atual do arquivo .env
let envContent = fs.readFileSync(envPath, 'utf8');

// Verificar quais variáveis já existem
const existingVars = {
  CF_ACCESS_KEY_ID: envContent.includes('CF_ACCESS_KEY_ID='),
  CF_ACCESS_SECRET: envContent.includes('CF_ACCESS_SECRET='),
  CF_ENDPOINT: envContent.includes('CF_ENDPOINT='),
  CF_BUCKET: envContent.includes('CF_BUCKET='),
  CF_PUBLIC_ACCESS_URL: envContent.includes('CF_PUBLIC_ACCESS_URL='),
};

// Ler variáveis R2 existentes para usar como padrão
const r2Vars = {
  R2_ACCESS_KEY: (envContent.match(/R2_ACCESS_KEY=([^\n]*)/)?.[1] || '').trim(),
  R2_SECRET_KEY: (envContent.match(/R2_SECRET_KEY=([^\n]*)/)?.[1] || '').trim(),
  R2_ENDPOINT: (envContent.match(/R2_ENDPOINT=([^\n]*)/)?.[1] || '').trim(),
  R2_BUCKET: (envContent.match(/R2_BUCKET=([^\n]*)/)?.[1] || '').trim(),
  R2_CUSTOM_DOMAIN: (envContent.match(/R2_CUSTOM_DOMAIN=([^\n]*)/)?.[1] || '').trim(),
};

// Preparar novas variáveis
const newVars = [];

if (!existingVars.CF_ACCESS_KEY_ID) {
  newVars.push(`CF_ACCESS_KEY_ID=${r2Vars.R2_ACCESS_KEY}`);
}

if (!existingVars.CF_ACCESS_SECRET) {
  newVars.push(`CF_ACCESS_SECRET=${r2Vars.R2_SECRET_KEY}`);
}

if (!existingVars.CF_ENDPOINT) {
  newVars.push(`CF_ENDPOINT=${r2Vars.R2_ENDPOINT}`);
}

if (!existingVars.CF_BUCKET) {
  newVars.push(`CF_BUCKET=${r2Vars.R2_BUCKET}`);
}

if (!existingVars.CF_PUBLIC_ACCESS_URL) {
  newVars.push(`CF_PUBLIC_ACCESS_URL=${r2Vars.R2_CUSTOM_DOMAIN || 'https://images.softmeat.com.br'}`);
}

// Adicionar as novas variáveis ao arquivo .env
if (newVars.length > 0) {
  envContent += '\n\n# Variáveis Cloudflare R2 para strapi-provider-cloudflare-r2\n';
  envContent += newVars.join('\n');

  // Salvar o arquivo atualizado
  fs.writeFileSync(envPath, envContent);

  console.log('\x1b[32mVariáveis adicionadas ao arquivo .env:\x1b[0m');
  newVars.forEach(v => console.log(`- ${v.split('=')[0]}`));
} else {
  console.log('\x1b[32mTodas as variáveis necessárias já existem no arquivo .env\x1b[0m');
}

console.log('\n\x1b[34mPróximos passos:\x1b[0m');
console.log('1. Verifique se as variáveis têm os valores corretos no arquivo .env');
console.log('2. Instale o provider: npm install strapi-provider-cloudflare-r2');
console.log('3. Reinicie o servidor Strapi: npm run develop');


src\admin\app.example.js

const config = {
  locales: [
    // 'ar',
    // 'fr',
    // 'cs',
    // 'de',
    // 'dk',
    // 'es',
    // 'he',
    // 'id',
    // 'it',
    // 'ja',
    // 'ko',
    // 'ms',
    // 'nl',
    // 'no',
    // 'pl',
    // 'pt-BR',
    // 'pt',
    // 'ru',
    // 'sk',
    // 'sv',
    // 'th',
    // 'tr',
    // 'uk',
    // 'vi',
    // 'zh-Hans',
    // 'zh',
  ],
};

const bootstrap = (app) => {
  console.log(app);
};

export default {
  config,
  bootstrap,
};


src\admin\app.js

const config = {
  locales: ['pt-BR'],
  translations: {
    'pt-BR': {
      'app.components.LeftMenu.navbrand.title': 'SoftMeat Dashboard',
      'Content Manager': 'Gerenciador de Conteúdo',
      'app.components.LeftMenu.collection.title': 'Tipos de Coleção',
      'Settings.permissions': 'Permissões',
      'Settings.roles': 'Funções',
      'Settings.users': 'Usuários',
      'notification.success.saved': 'Salvo com sucesso',
      'global.save': 'Salvar',
      'global.delete': 'Deletar',
      'global.back': 'Voltar',
      'global.cancel': 'Cancelar',
    },
  },
};


src\admin\webpack.config.example.js

'use strict';

/* eslint-disable no-unused-vars */
module.exports = (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it
  // Perform customizations to webpack config
  // Important: return the modified config
  return config;
};


src\api\carrossel-treinamento\content-types\carrossel-treinamento\schema.json

{
  "kind": "collectionType",
  "collectionName": "carrossel_treinamentos",
  "info": {
    "singularName": "carrossel-treinamento",
    "pluralName": "carrossel-treinamentos",
    "displayName": "Carrossel Treinamento"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "DepoimentosTreinamentos": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": true
    }
  }
}


src\api\carrossel-treinamento\controllers\carrossel-treinamento.js

'use strict';

/**
 * carrossel-treinamento controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::carrossel-treinamento.carrossel-treinamento');


src\api\carrossel-treinamento\routes\carrossel-treinamento.js

'use strict';

/**
 * carrossel-treinamento router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::carrossel-treinamento.carrossel-treinamento');


src\api\carrossel-treinamento\services\carrossel-treinamento.js

'use strict';

/**
 * carrossel-treinamento service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::carrossel-treinamento.carrossel-treinamento');


src\api\cliente\content-types\cliente\schema.json

{
  "kind": "collectionType",
  "collectionName": "clientes",
  "info": {
    "singularName": "cliente",
    "pluralName": "clientes",
    "displayName": "Clientes"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true
    },
    "Logo": {
      "allowedTypes": [
        "images"
      ],
      "type": "media",
      "multiple": false,
      "required": true
    },
    
    "Descricao_Case": {
      "type": "string",
      "required": true
    }
  }
}


src\api\cliente\controllers\cliente.js

'use strict';

/**
 * cliente controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::cliente.cliente');


src\api\cliente\routes\cliente.js

'use strict';

/**
 * cliente router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::cliente.cliente');


src\api\cliente\services\cliente.js

'use strict';

/**
 * cliente service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::cliente.cliente');


src\api\cronograma\content-types\cronograma\schema.json

{
  "kind": "collectionType",
  "collectionName": "cronogramas",
  "info": {
    "singularName": "cronograma",
    "pluralName": "cronogramas",
    "displayName": "Cronogramas",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Data": {
      "type": "date",
      "required": true
    },
    "Cidade": {
      "type": "string",
      "required": true,
      "default": "Ribeirão Preto"
    },
    "Vagas_Totais": {
      "type": "integer",
      "required": true
    },
    "Vagas_Disponiveis": {
      "type": "integer"
    },
    "Ativo": {
      "type": "boolean",
      "default": true,
      "required": true
    },



    "treinamento": {
      "type": "relation",
      "relation": "oneToOne",
      "target": "api::treinamento.treinamento"
    }
  }
}



src\api\cronograma\controllers\cronograma.js

'use strict';

/**
 * cronograma controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::cronograma.cronograma');


src\api\cronograma\routes\cronograma.js

'use strict';

/**
 * cronograma router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::cronograma.cronograma');


src\api\cronograma\services\cronograma.js

'use strict';

/**
 * cronograma service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::cronograma.cronograma');


src\api\curso-online\content-types\curso-online\schema.json

{
  "kind": "collectionType",
  "collectionName": "cursos_online",
  "info": {
    "singularName": "curso-online",
    "pluralName": "cursos-online",
    "displayName": "Cursos Online"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "slug": {
      "type": "uid",
      "targetField": "Nome",
      "required": true
    },
    "Categoria": {
      "type": "enumeration",
      "enum": [
        "Básico",
        "Intermediário",
        "Avançado",
        "Especialização"
      ]
    },
    "Descricao_Catalogo": {
      "type": "text",
      "required": true
    },
    "Descricao": {
      "type": "richtext",
      "required": true
    },
    "Link_Hotmart": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "Imagem": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": ["images"]
    },
    "Ordem_Exibicao": {
      "type": "integer",
      "default": 999
    },
    "Destaque": {
      "type": "boolean",
      "default": false,
      "required": true
    },
    "Meta_Title": {
      "type": "string"
    },
    "Meta_Description": {
      "type": "text"
    }
  }
}


src\api\curso-online\controllers\curso-online.js

'use strict';

/**
 * curso-online controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::curso-online.curso-online');


src\api\curso-online\routes\curso-online.js

'use strict';

/**
 * curso-online router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::curso-online.curso-online');


src\api\curso-online\services\curso-online.js

'use strict';

/**
 * curso-online service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::curso-online.curso-online');


src\api\hero-consultoria\content-types\hero-consultoria\schema.json

{
  "kind": "collectionType",
  "collectionName": "hero_consultorias",
  "info": {
    "singularName": "hero-consultoria",
    "pluralName": "hero-consultorias",
    "displayName": "Hero Consultoria"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Consultor": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\hero-consultoria\controllers\hero-consultoria.js

'use strict';

/**
 * hero-consultoria controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::hero-consultoria.hero-consultoria');


src\api\hero-consultoria\routes\hero-consultoria.js

'use strict';

/**
 * hero-consultoria router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::hero-consultoria.hero-consultoria');


src\api\hero-consultoria\services\hero-consultoria.js

'use strict';

/**
 * hero-consultoria service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::hero-consultoria.hero-consultoria');


src\api\home-consultoria\content-types\home-consultoria\schema.json

{
  "kind": "collectionType",
  "collectionName": "home_consultorias",
  "info": {
    "singularName": "home-consultoria",
    "pluralName": "home-consultorias",
    "displayName": "Home Consultoria"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "ConsultoriaPage": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\home-consultoria\controllers\home-consultoria.js

'use strict';

/**
 * home-consultoria controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::home-consultoria.home-consultoria');


src\api\home-consultoria\routes\home-consultoria.js

'use strict';

/**
 * home-consultoria router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::home-consultoria.home-consultoria');


src\api\home-consultoria\services\home-consultoria.js

'use strict';

/**
 * home-consultoria service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::home-consultoria.home-consultoria');


src\api\home-hero\content-types\home-hero\schema.json

{
  "kind": "collectionType",
  "collectionName": "home_heroes",
  "info": {
    "singularName": "home-hero",
    "pluralName": "home-heroes",
    "displayName": "Home Hero",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "PageHero": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ]
    }
  }
}


src\api\home-hero\controllers\home-hero.js

'use strict';

/**
 * home-hero controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::home-hero.home-hero');


src\api\home-hero\routes\home-hero.js

'use strict';

/**
 * home-hero router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::home-hero.home-hero');


src\api\home-hero\services\home-hero.js

'use strict';

/**
 * home-hero service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::home-hero.home-hero');


src\api\home-treinamento\content-types\home-treinamento\schema.json

{
  "kind": "collectionType",
  "collectionName": "home_treinamentos",
  "info": {
    "singularName": "home-treinamento",
    "pluralName": "home-treinamentos",
    "displayName": "Home Treinamento"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "TreinamentoPage": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": false
    }
  }
}


src\api\home-treinamento\controllers\home-treinamento.js

'use strict';

/**
 * home-treinamento controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::home-treinamento.home-treinamento');


src\api\home-treinamento\routes\home-treinamento.js

'use strict';

/**
 * home-treinamento router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::home-treinamento.home-treinamento');


src\api\home-treinamento\services\home-treinamento.js

'use strict';

/**
 * home-treinamento service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::home-treinamento.home-treinamento');


src\api\index-destaque\content-types\index-destaque\schema.json

{
  "kind": "singleType",
  "collectionName": "index_destaques",
  "info": {
    "singularName": "index-destaque",
    "pluralName": "index-destaques",
    "displayName": "Index Destaques",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "cursos_em_destaque": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::curso-online.curso-online"
    },
    "Imagem": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": ["images"]
    },
    "produtos_em_destaque": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::produto.produto"
    }
  }
}


src\api\index-destaque\controllers\index-destaque.js

'use strict';

/**
 * index-destaque controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::index-destaque.index-destaque');


src\api\index-destaque\routes\index-destaque.js

'use strict';

/**
 * index-destaque router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::index-destaque.index-destaque');


src\api\index-destaque\services\index-destaque.js

'use strict';

/**
 * index-destaque service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::index-destaque.index-destaque');


src\api\produto\content-types\produto\schema.json

{
  "kind": "collectionType",
  "collectionName": "produtos",
  "info": {
    "singularName": "produto",
    "pluralName": "produtos",
    "displayName": "Produtos",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "slug": {
      "type": "uid",
      "targetField": "Nome"
    },
    "Categoria": {
      "type": "enumeration",
      "enum": [
        "Maturados",
        "Fermentados",
        "Defumados",
        "Cozidos",
        "Frescais"
      ],
      "required": true
    },
    "Descricao_Catalogo": {
      "type": "string",
      "required": true
    },
    "Descricao": {
      "type": "richtext",
      "required": true
    },
    "Link_Mercado_Livre": {
      "type": "string",
      "required": true,
      "unique": true
    },
    "Imagem": {
      "type": "media",
      "multiple": true,
      "required": false,
      "allowedTypes": [
        "images"
      ]
    },
    "Destaque": {
      "type": "boolean",
      "default": false,
      "required": true
    },
    "Meta_File": {
      "type": "string"
    },
    "Meta_Description": {
      "type": "text"
    },
    "Disponivel": {
      "type": "boolean",
      "default": true,
      "required": true
    }
  }
}


src\api\produto\controllers\produto.js

'use strict';

/**
 * produto controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::produto.produto');


src\api\produto\routes\produto.js

'use strict';

/**
 * produto router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::produto.produto');


src\api\produto\services\produto.js

'use strict';

/**
 * produto service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::produto.produto');


src\api\sobre-carrossel\content-types\sobre-carrossel\schema.json

{
  "kind": "collectionType",
  "collectionName": "sobre_carrosseis",
  "info": {
    "singularName": "sobre-carrossel",
    "pluralName": "sobre-carrosseis",
    "displayName": "Sobre Carrossel"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Titulo": {
      "type": "string"
    },
    "Imagens": {
      "allowedTypes": [
        "images",
        "files",
        "videos",
        "audios"
      ],
      "type": "media",
      "multiple": true
    }
  }
}


src\api\sobre-carrossel\controllers\sobre-carrossel.js

'use strict';

/**
 * sobre-carrossel controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::sobre-carrossel.sobre-carrossel');


src\api\sobre-carrossel\routes\sobre-carrossel.js

'use strict';

/**
 * sobre-carrossel router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::sobre-carrossel.sobre-carrossel');


src\api\sobre-carrossel\services\sobre-carrossel.js

'use strict';

/**
 * sobre-carrossel service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::sobre-carrossel.sobre-carrossel');


src\api\testemunho\content-types\testemunho\schema.json

{
  "kind": "collectionType",
  "collectionName": "testemunhos",
  "info": {
    "singularName": "testemunho",
    "pluralName": "testemunhos",
    "displayName": "Testemunhos"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true
    },
    "Imagem": {
      "type": "media",
      "multiple": false,
      "required": false,
      "allowedTypes": ["images"]
    },
    "Foto": {
      "allowedTypes": [
        "images"
      ],
      "type": "media",
      "multiple": false,
      "required": true
    },
    "Depoimento": {
      "type": "text"
    },
    "curso_realizado": {
      "type": "relation",
      "relation": "oneToMany",
      "target": "api::treinamento.treinamento"
    },
    "LinkedIn": {
      "type": "string"
    },
    "Instagram": {
      "type": "string"
    },
    "Facebook": {
      "type": "string"
    },
    "Cargo": {
      "type": "string"
    },
    "Empresa": {
      "type": "string"
    },
    "Ativo": {
      "type": "boolean",
      "default": true
    }
  }
}


src\api\testemunho\controllers\testemunho.js

'use strict';

/**
 * testemunho controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::testemunho.testemunho');


src\api\testemunho\routes\testemunho.js

'use strict';

/**
 * testemunho router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::testemunho.testemunho');


src\api\testemunho\services\testemunho.js

'use strict';

/**
 * testemunho service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::testemunho.testemunho');


src\api\treinamento\content-types\treinamento\schema.json

{
  "kind": "collectionType",
  "collectionName": "treinamentos",
  "info": {
    "singularName": "treinamento",
    "pluralName": "treinamentos",
    "displayName": "Treinamentos",
    "description": ""
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "Nome": {
      "type": "string",
      "required": true
    },
    "Nivel": {
      "type": "enumeration",
      "enum": [
        "Basico",
        "Intermediario",
        "Avancado"
      ],
      "required": true
    },
    "Duracao": {
      "type": "integer",
      "required": true,
      "default": 1
    },
    "Descricao_Catalogo": {
      "type": "text",
      "required": true
    },
    "Topicos": {
      "type": "richtext",
      "required": true
    },
    "Ativo": {
      "type": "boolean",
      "default": false,
      "required": true
    },
    "Ordem": {
      "type": "integer"
    },
    "Meta_Title": {
      "type": "text"
    },
    "Meta_Description": {
      "type": "text"
    }
  }
}


src\api\treinamento\controllers\treinamento.js

'use strict';

/**
 * treinamento controller
 */

const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::treinamento.treinamento');


src\api\treinamento\routes\treinamento.js

'use strict';

/**
 * treinamento router
 */

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::treinamento.treinamento');


src\api\treinamento\services\treinamento.js

'use strict';

/**
 * treinamento service
 */

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::treinamento.treinamento');


src\extensions\upload\services\format-url.js

'use strict';

const { formatR2Url } = require('../../../utils/r2');

/**
 * Formatador de URL para arquivos armazenados no R2
 */
module.exports = {
  /**
   * Formata a URL de um arquivo, convertendo URLs R2 padrão para o domínio personalizado
   * @param {Object} file - Objeto de arquivo do Strapi
   * @returns {Object} Objeto de arquivo com URL formatada
   */
  formatFileUrl(file, options = {}) {
    // Verificar se o arquivo tem URL
    if (!file?.url) {
      return file;
    }

    // Verificar se o arquivo já está usando o domínio personalizado
    if (process.env.R2_CUSTOM_DOMAIN && file.url.startsWith(process.env.R2_CUSTOM_DOMAIN)) {
      return file;
    }

    // Verificar se o arquivo é do R2 (verificando endpoint)
    if (process.env.R2_ENDPOINT && file.url.includes(process.env.R2_ENDPOINT)) {
      try {
        // Extrair o caminho relativo do arquivo
        const urlObj = new URL(file.url);
        const pathname = urlObj.pathname;

        // Pegar todos os segmentos após o nome do bucket
        const bucketPos = pathname.indexOf(process.env.R2_BUCKET);

        if (bucketPos !== -1) {
          const relativePath = pathname.substring(bucketPos + process.env.R2_BUCKET.length + 1);
          // Formatar com a URL personalizada
          file.url = formatR2Url(relativePath);
          console.log(`URL formatada: ${relativePath} -> ${file.url}`);
        }
      } catch (error) {
        console.error(`Erro ao formatar URL ${file.url}: ${error.message}`);
      }
    }

    return file;
  },
};

src\extensions\upload\strapi-server.js

'use strict';

const formatUrl = require('./services/format-url');

/**
 * Configuração de extensão para o plugin de upload
 * Sobrescreve funções para formatar URLs do R2
 */
module.exports = (plugin) => {
  // Registrar função de log para diagnóstico
  const formatDebug = (file) => {
    if (process.env.DEBUG_UPLOAD === 'true') {
      console.log('[Upload Debug] Formatando URL:', file?.url);
    }
    return file;
  };

  // Substituir a função findOne para formatar URLs
  const oldFindOne = plugin.services.upload.findOne;
  plugin.services.upload.findOne = async (id, populate) => {
    const file = await oldFindOne(id, populate);

    // Formatar URL se encontrou o arquivo
    if (file) {
      formatDebug(file);
      return formatUrl.formatFileUrl(file);
    }

    return file;
  };

  // Substituir a função findMany para formatar URLs
  const oldFindMany = plugin.services.upload.findMany;
  plugin.services.upload.findMany = async (query) => {
    const files = await oldFindMany(query);

    // Formatar URLs de todos os arquivos
    return files.map(file => {
      formatDebug(file);
      return formatUrl.formatFileUrl(file);
    });
  };

  // Sobrescrever a função do serviço upload para garantir que os links sejam formatados no momento do upload
  const oldUpload = plugin.services.upload.upload;
  plugin.services.upload.upload = async (fileData, config) => {
    const result = await oldUpload(fileData, config);

    // Formatar URLs nos resultados do upload
    if (Array.isArray(result)) {
      return result.map(file => formatUrl.formatFileUrl(file));
    }

    return formatUrl.formatFileUrl(result);
  };

  return plugin;
};

src\index.js

// src/index.js - Adicione no início da função register ou bootstrap
module.exports = {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   * This gives you an opportunity to extend code.
   */
  register(/*{ strapi }*/) {
    console.log('============ DEBUG ENVIRONMENT VARIABLES ============');
    console.log('R2_ENDPOINT:', process.env.R2_ENDPOINT);
    console.log('R2_BUCKET:', process.env.R2_BUCKET);
    console.log('R2_CUSTOM_DOMAIN:', process.env.R2_CUSTOM_DOMAIN);
    console.log('CLOUDINARY_NAME:', process.env.CLOUDINARY_NAME);
  },

  /**
   * An asynchronous bootstrap function that runs before
   * your application gets started.
   *
   * This gives you an opportunity to set up your data model,
   * run jobs, or perform some special logic.
   */
  bootstrap(/*{ strapi }*/) {},
};


src\utils\r2.js

'use strict';

/**
 * Utilitários para manipulação de URLs do Cloudflare R2
 */

/**
 * Formata um caminho de arquivo para uma URL R2 completa
 * @param {string} path - Caminho relativo do arquivo no bucket
 * @returns {string} URL formatada
 */
const formatR2Url = (path) => {
  if (!path) return '';

  // Garantir que path não é undefined ou null
  const filePath = String(path);

  // Remover barras iniciais para consistência
  const cleanPath = filePath.startsWith('/') ? filePath.substring(1) : filePath;

  // Usar domínio personalizado se disponível
  const customDomain = process.env.R2_CUSTOM_DOMAIN;
  if (customDomain) {
    // Garantir que o domínio personalizado não termine com barra
    const domain = customDomain.endsWith('/')
      ? customDomain.slice(0, -1)
      : customDomain;

    return `${domain}/${cleanPath}`;
  }

  // Fallback para URL direta do R2
  const endpoint = process.env.R2_ENDPOINT;
  const bucket = process.env.R2_BUCKET;

  if (!endpoint || !bucket) {
    console.error('Erro: R2_ENDPOINT ou R2_BUCKET não definidos!');
    return '';
  }

  // Garantir que o endpoint não termine com barra
  const cleanEndpoint = endpoint.endsWith('/')
    ? endpoint.slice(0, -1)
    : endpoint;

  return `${cleanEndpoint}/${bucket}/${cleanPath}`;
};

/**
 * Determina o tipo de recurso com base no MIME type
 * @param {string} mimeType - MIME type do arquivo
 * @returns {string} Tipo de recurso (images, videos, audios, files)
 */
const getResourceType = (mimeType) => {
  if (!mimeType) return 'files';

  if (mimeType.startsWith('image/')) return 'images';
  if (mimeType.startsWith('video/')) return 'videos';
  if (mimeType.startsWith('audio/')) return 'audios';

  return 'files';
};

/**
 * Gera um nome de arquivo único baseado no hash e timestamp
 * @param {Object} file - Objeto do arquivo Strapi
 * @returns {string} Nome de arquivo único
 */
const generateFileName = (file) => {
  if (!file || !file.hash) {
    const randomHash = Math.random().toString(36).substring(2, 15);
    return `${randomHash}-${Date.now()}.unknown`;
  }

  const extension = (file.ext && file.ext.startsWith('.'))
    ? file.ext.substring(1)
    : (file.ext || 'bin');

  return `${file.hash}-${Date.now()}.${extension}`;
};

/**
 * Constrói um caminho de pasta para armazenamento
 * @param {string} resourceType - Tipo de recurso (images, videos, etc)
 * @param {Object} options - Opções adicionais
 * @returns {string} Caminho da pasta formatado
 */
const getResourceFolder = (resourceType, options = {}) => {
  const { category = '', subfolder = '' } = options;

  let path = resourceType || 'files';

  if (category) {
    path += `/${category}`;
  }

  if (subfolder) {
    path += `/${subfolder}`;
  }

  return path;
};

// Exportar todas as funções utilitárias
module.exports = {
  formatR2Url,
  getResourceType,
  generateFileName,
  getResourceFolder
};

